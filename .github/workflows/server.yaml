# This is a basic workflow to help you get started with Actions
# It runs tests for a Python project using Pipenv, Pytest, and Coverage.
# For more information see: https://docs.github.com/en/actions

name: Flask CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events and pull request events but only for the "main" and "develop" branches
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "flask-tests"
  flask-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Add a PostgreSQL service container to run tests against.
    services:
      postgres:
        image: postgres:12
        # Environment variables for the postgres container.
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        # Health check to ensure postgres is ready before starting the tests.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: ./server
    strategy:
      # You can test against multiple Python versions
      matrix:
        python-version: ["3.12"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Sets up the specified Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Installs Pipenv
      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      # 4. Caches Pipenv virtual environment to speed up builds
      # The cache is invalidated when Pipfile.lock changes.
      - name: Cache Pipenv virtual environment
        uses: actions/cache@v4
        id: cache-pipenv
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      # 5. Install dependencies using Pipenv
      - name: Install dependencies
        run: pipenv install --dev

      # 6. Verify pytest and plugins
      - name: Verify installed packages
        run: pipenv run pip list | grep pytest

      # 7. Run tests with coverage and comment on PR
      - name: Run tests with coverage
        run: pipenv run pytest --cov=. tests/ > pytest-coverage.txt
        env:
          # Provide the database URI to the Flask app.
          # The host is 'localhost' and the port is dynamically assigned by the runner.
          FLASK_SQLALCHEMY_DATABASE_URI: postgresql://testuser:testpassword@localhost:5432/testdb

      # 8. Comment coverage report on PR, only for changed files
      - name: Coverage comment (changed files only)
        if: github.event_name == 'pull_request'
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./server/pytest-coverage.txt
          junitxml-path: ./server/pytest.xml
          report-only-changed-files: true
